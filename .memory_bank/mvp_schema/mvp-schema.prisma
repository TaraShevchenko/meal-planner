// MVP Schema для Meal Planner
// Объединяет все наработки из units-and-portions-system.md и yield-functionality-recommendations.md
// Интегрирован с Clerk для аутентификации

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// ПОЛЬЗОВАТЕЛИ (интеграция с Clerk)
// ============================================================================

model User {
  id        String   @id // Clerk user ID
  email     String   @unique
  firstName String?
  lastName  String?
  name      String?  // Computed field: firstName + lastName
  imageUrl  String?
  username  String?  @unique
  
  // Clerk metadata
  clerkCreatedAt DateTime?
  clerkUpdatedAt DateTime?
  
  // App metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Связи
  ingredients    Ingredient[]
  meals          Meal[]
  quickMeals     QuickMeal[]
  mealEntries    MealEntry[]
  portionHistory PortionHistory[]
  
  @@index([email])
  @@index([username])
  @@map("users")
}

// ============================================================================
// ИНГРЕДИЕНТЫ
// ============================================================================

model Ingredient {
  id              String   @id @default(cuid())
  userId          String
  name            String
  category        String?
  
  // Пищевая ценность на 100г
  calories        Float?   @default(0)
  protein         Float?   @default(0)
  carbs           Float?   @default(0)
  fat             Float?   @default(0)
  
  // Система единиц измерения
  supportedUnits  String   @default("г,шт")        // поддерживаемые единицы
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Связи
  user                   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  mealIngredients        MealIngredient[]
  mealEntryIngredients   MealEntryIngredient[]
  portionHistory         PortionHistory[]
  
  @@index([userId])
  @@index([category])
  @@map("ingredients")
}

// ============================================================================
// БЛЮДА (переименованные из Recipe)
// ============================================================================

model Meal {
  id              String   @id @default(cuid())
  userId          String
  name            String
  description     String?
  instructions    String?
  
  // Функционал выходного веса (из yield-functionality-recommendations.md)
  expectedYield   Float?                           // ожидаемый выход в граммах
  actualYield     Float?                           // фактический выход в граммах
  yieldNotes      String?                          // заметки о выходе (опционально)
  
  prepTime        Int?                             // время подготовки в минутах
  cookTime        Int?                             // время готовки в минутах
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Связи
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  mealIngredients MealIngredient[]
  mealEntryMeals  MealEntryMeal[]
  portionHistory  PortionHistory[]
  
  @@index([userId])
  @@map("meals")
}

// ============================================================================
// СВЯЗЬ БЛЮД С ИНГРЕДИЕНТАМИ
// ============================================================================

model MealIngredient {
  id           String @id @default(cuid())
  mealId       String
  ingredientId String
  grams        Float                              // количество в граммах
  
  // Связи
  meal       Meal       @relation(fields: [mealId], references: [id], onDelete: Cascade)
  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  
  @@unique([mealId, ingredientId])
  @@map("meal_ingredients")
}

// ============================================================================
// БЫСТРЫЕ БЛЮДА
// ============================================================================

model QuickMeal {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  
  // Пищевая ценность на 100г (рассчитывается или вводится вручную)
  calories    Float?   @default(0)
  protein     Float?   @default(0)
  carbs       Float?   @default(0)
  fat         Float?   @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Связи
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  mealEntryQuickMeals   MealEntryQuickMeal[]
  portionHistory        PortionHistory[]
  
  @@index([userId])
  @@map("quick_meals")
}



// ============================================================================
// ЗАПИСИ О ПРИЕМАХ ПИЩИ
// ============================================================================

model MealEntry {
  id          String    @id @default(cuid())
  userId      String
  date        DateTime  // Дата планирования (день, месяц, год)
  mealTime    DateTime? // Время выполнения: null = планируется, заполнено = выполнено
  mealType    MealType
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Связи
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Связи many-to-many с ингредиентами, блюдами и быстрыми блюдами
  mealEntryIngredients MealEntryIngredient[]
  mealEntryMeals       MealEntryMeal[]
  mealEntryQuickMeals  MealEntryQuickMeal[]
  
  @@index([userId])
  @@index([date])
  @@index([mealTime])
  @@index([mealType])
  @@map("meal_entries")
}

// ============================================================================
// СВЯЗИ ЗАПИСЕЙ О ПРИЕМАХ ПИЩИ С ИНГРЕДИЕНТАМИ
// ============================================================================

model MealEntryIngredient {
  id           String @id @default(cuid())
  mealEntryId  String
  ingredientId String
  grams        Float  // количество в граммах
  
  // Связи
  mealEntry  MealEntry  @relation(fields: [mealEntryId], references: [id], onDelete: Cascade)
  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  
  @@unique([mealEntryId, ingredientId])
  @@map("meal_entry_ingredients")
}

// ============================================================================
// СВЯЗИ ЗАПИСЕЙ О ПРИЕМАХ ПИЩИ С БЛЮДАМИ
// ============================================================================

model MealEntryMeal {
  id          String @id @default(cuid())
  mealEntryId String
  mealId      String
  grams       Float  // количество в граммах
  
  // Связи
  mealEntry MealEntry @relation(fields: [mealEntryId], references: [id], onDelete: Cascade)
  meal      Meal      @relation(fields: [mealId], references: [id], onDelete: Cascade)
  
  @@unique([mealEntryId, mealId])
  @@map("meal_entry_meals")
}

// ============================================================================
// СВЯЗИ ЗАПИСЕЙ О ПРИЕМАХ ПИЩИ С БЫСТРЫМИ БЛЮДАМИ
// ============================================================================

model MealEntryQuickMeal {
  id          String @id @default(cuid())
  mealEntryId String
  quickMealId String
  grams       Float  // количество в граммах
  
  // Связи
  mealEntry MealEntry @relation(fields: [mealEntryId], references: [id], onDelete: Cascade)
  quickMeal QuickMeal @relation(fields: [quickMealId], references: [id], onDelete: Cascade)
  
  @@unique([mealEntryId, quickMealId])
  @@map("meal_entry_quick_meals")
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

// ============================================================================
// ИСТОРИЯ ПОРЦИЙ (из units-and-portions-system.md)
// ============================================================================

model PortionHistory {
  id        String   @id @default(uuid())
  userId    String
  itemType  ItemType
  itemId    String
  amount    Float                                // универсальное поле для количества
  unit      String                               // "г", "шт", "порция"
  usedCount Int      @default(1)
  lastUsed  DateTime @default(now())
  createdAt DateTime @default(now())
  
  // Связи
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  ingredient Ingredient? @relation(fields: [itemId], references: [id], onDelete: Cascade)
  meal       Meal?       @relation(fields: [itemId], references: [id], onDelete: Cascade)
  quickMeal  QuickMeal?  @relation(fields: [itemId], references: [id], onDelete: Cascade)
  
  @@unique([userId, itemType, itemId, amount, unit])
  @@index([userId])
  @@index([itemType])
  @@index([usedCount])
  @@map("portion_history")
}

enum ItemType {
  INGREDIENT
  MEAL
  QUICK_MEAL
}

// ============================================================================
// ИНДЕКСЫ И ОГРАНИЧЕНИЯ
// ============================================================================

// Дополнительные индексы для производительности
// @@index([userId, date]) - для быстрого поиска записей пользователя по дате
// @@index([mealType, date]) - для фильтрации по типу приема пищи
// @@index([usedCount]) - для сортировки популярных порций