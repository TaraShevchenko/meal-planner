import { PrismaClient } from '@prisma/client'

import { mealTypesConfig } from 'module/Planner/model/config'

import { INGREDIENTS } from '../data/Ingredients.data'
import { RECIPES } from '../data/Recipe.data'
import type { SeedDayData, SeedDayPlan, SeedIngredient, SeedRecipe } from '../types'
import { createMealTime, logProgress } from '../utils'

const prisma = new PrismaClient()

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
 */
async function findUserByName(userName: string) {
    const user = await prisma.user.findFirst({
        where: { name: userName },
    })

    if (!user) {
        throw new Error(
            `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º "${userName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–º—è.`,
        )
    }

    console.log(`   üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName} (ID: ${user.id})`)
    return user
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω —Å–∏–¥–∞ –¥–ª—è –ª—é–±–æ–≥–æ –¥–Ω—è
 * –°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, —Ä–µ—Ü–µ–ø—Ç—ã –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –º–µ–Ω—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
 */
async function seedDayTemplate(dayData: SeedDayData, userName: string = 'Taras Shevchenko') {
    console.log(`üåü –ù–∞—á–∞–ª–æ —Å–∏–¥–∞ –¥–ª—è –¥–Ω—è ${dayData.dayPlan.date}`)
    console.log(`üë§ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userName}`)
    console.log(`üì¶ –û–±—â–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: ${INGREDIENTS.length}`)
    console.log(`üç≥ –û–±—â–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤: ${RECIPES.length}`)

    try {
        // 0. –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await findUserByName(userName)

        // 1. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        await seedIngredients(INGREDIENTS)

        // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        await seedRecipes(RECIPES)

        // 3. –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –∏ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
        await seedMenu(dayData.dayPlan, user.id)

        console.log(`‚úÖ –°–∏–¥ –¥–ª—è –¥–Ω—è ${dayData.dayPlan.date} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!`)
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∏–¥–∞:', error)
        throw error
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
async function seedIngredients(ingredients: SeedIngredient[]) {
    console.log('\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤...')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö
    const names = ingredients.map((ing) => ing.name)
    const uniqueNames = new Set(names)
    if (names.length !== uniqueNames.size) {
        console.warn('‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–º–µ–Ω–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö!')
        const duplicates = names.filter((name, index) => names.indexOf(name) !== index)
        console.warn('–î—É–±–ª–∏–∫–∞—Ç—ã:', [...new Set(duplicates)])
    }

    let currentIndex = 0
    for (const ingredient of ingredients) {
        currentIndex++
        logProgress('–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã', currentIndex, ingredients.length)

        await prisma.ingredients.upsert({
            where: { name: ingredient.name },
            update: {
                calories: ingredient.calories,
                protein: ingredient.protein,
                carbs: ingredient.carbs,
                fat: ingredient.fat,
            },
            create: ingredient,
        })
    }

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${ingredients.length} –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤`)
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
async function seedRecipes(recipes: SeedRecipe[]) {
    console.log('\nüç≥ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤...')

    let currentIndex = 0
    for (const recipe of recipes) {
        currentIndex++
        logProgress('–†–µ—Ü–µ–ø—Ç—ã', currentIndex, recipes.length)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ—Ü–µ–ø—Ç
        const existingRecipe = await prisma.recipe.findFirst({
            where: { name: recipe.name },
        })

        let createdRecipe
        if (existingRecipe) {
            console.log(`   üìù –†–µ—Ü–µ–ø—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${recipe.name}`)
            createdRecipe = existingRecipe
        } else {
            createdRecipe = await prisma.recipe.create({
                data: {
                    name: recipe.name,
                },
            })
            console.log(`   ‚ú® –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç: ${recipe.name}`)
        }

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
        await prisma.recipeToIngredients.deleteMany({
            where: { recipeId: createdRecipe.id },
        })

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
        for (const ingredientData of recipe.ingredients) {
            const ingredient = await prisma.ingredients.findUnique({
                where: { name: ingredientData.ingredientName },
            })

            if (!ingredient) {
                console.error(`   ‚ùå –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${ingredientData.ingredientName}`)
                continue
            }

            await prisma.recipeToIngredients.create({
                data: {
                    quantity: ingredientData.quantity,
                    ingredientId: ingredient.id,
                    recipeId: createdRecipe.id,
                },
            })
        }
    }

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${recipes.length} —Ä–µ—Ü–µ–ø—Ç–æ–≤`)
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –∏ –≤—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –¥–ª—è –¥–Ω—è
 */
async function seedMenu(dayPlan: SeedDayPlan, userId: string) {
    console.log('\nüóìÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –∏ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏...')

    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
    const existingMenu = await prisma.menu.findFirst({
        where: {
            date: new Date(dayPlan.date),
            userId: userId,
        },
        include: {
            meals: true,
        },
    })

    if (existingMenu) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏
        await prisma.mealToRecipe.deleteMany({
            where: { mealId: { in: existingMenu.meals.map((meal) => meal.id) } },
        })
        await prisma.mealToIngredients.deleteMany({
            where: { mealId: { in: existingMenu.meals.map((meal) => meal.id) } },
        })
        await prisma.meal.deleteMany({
            where: { menuId: existingMenu.id },
        })
        await prisma.menu.delete({
            where: { id: existingMenu.id },
        })
        console.log(`   üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é –Ω–∞ ${dayPlan.date}`)
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
    const menu = await prisma.menu.create({
        data: {
            date: new Date(dayPlan.date),
            userId: userId,
        },
    })

    console.log(`   üìÖ –°–æ–∑–¥–∞–Ω–æ –º–µ–Ω—é –Ω–∞ ${dayPlan.date}`)

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ sortOrder –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–∏–µ–º–∞—Ö –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞
    const sortedMeals = [...dayPlan.meals].sort((a, b) => {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ —Ç–∏–ø—É (–ø–æ defaultSortOrder), –∑–∞—Ç–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        const typeA = mealTypesConfig[a.type]?.defaultSortOrder ?? 999
        const typeB = mealTypesConfig[b.type]?.defaultSortOrder ?? 999

        if (typeA !== typeB) {
            return typeA - typeB
        }

        // –ï—Å–ª–∏ —Ç–∏–ø—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        const timeA = a.mealTime.replace(':', '')
        const timeB = b.mealTime.replace(':', '')
        return parseInt(timeA) - parseInt(timeB)
    })

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–µ–º—ã –ø–∏—â–∏
    let currentIndex = 0
    const mealTypeCounters = new Map<string, number>()

    for (const mealData of sortedMeals) {
        currentIndex++
        logProgress('–ü—Ä–∏–µ–º—ã –ø–∏—â–∏', currentIndex, sortedMeals.length)

        // –ü–æ–ª—É—á–∞–µ–º sortOrder –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
        const mealConfig = mealTypesConfig[mealData.type]
        let sortOrder = mealConfig ? mealConfig.defaultSortOrder : 0

        // –ï—Å–ª–∏ —É —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —É–∂–µ –µ—Å—Ç—å –ø—Ä–∏–µ–º—ã –ø–∏—â–∏, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º sortOrder
        const typeKey = mealData.type
        const currentCount = mealTypeCounters.get(typeKey) || 0
        mealTypeCounters.set(typeKey, currentCount + 1)

        // –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–∏–µ–º–æ–≤ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        if (currentCount > 0) {
            sortOrder = sortOrder + currentCount * 0.1 // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
        }

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–µ–º –ø–∏—â–∏
        const meal = await prisma.meal.create({
            data: {
                type: mealData.type,
                mealTime: createMealTime(dayPlan.date, mealData.mealTime),
                sortOrder: sortOrder,
                menuId: menu.id,
            },
        })

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç—ã
        for (const recipeData of mealData.recipes) {
            const recipe = await prisma.recipe.findFirst({
                where: { name: recipeData.recipeName },
                include: {
                    ingredients: true,
                },
            })

            if (recipe) {
                let servings = recipeData.servings

                // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –≥—Ä–∞–º–º—ã, –≤—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π
                if (recipeData.grams && !recipeData.servings) {
                    // –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–π –≤–µ—Å —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ –≤—Å–µ—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
                    const totalWeight = recipe.ingredients.reduce((sum, ing) => sum + ing.quantity, 0)

                    if (totalWeight > 0) {
                        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ª—é –ø–æ—Ä—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥—Ä–∞–º–º–æ–≤
                        servings = recipeData.grams / totalWeight
                        console.log(
                            `      üìè –†–µ—Ü–µ–ø—Ç ${recipeData.recipeName}: ${recipeData.grams}–≥ –∏–∑ ${totalWeight}–≥ = ${servings.toFixed(3)} –ø–æ—Ä—Ü–∏–π`,
                        )
                    } else {
                        console.warn(`      ‚ö†Ô∏è  –†–µ—Ü–µ–ø—Ç ${recipeData.recipeName} –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤–æ–π –æ–±—â–∏–π –≤–µ—Å`)
                        servings = 1 // fallback
                    }
                }

                if (servings !== undefined) {
                    await prisma.mealToRecipe.create({
                        data: {
                            mealId: meal.id,
                            recipeId: recipe.id,
                            servings: servings,
                        },
                    })

                    const portionInfo = recipeData.grams
                        ? `${recipeData.grams}–≥ (${servings.toFixed(3)} –ø–æ—Ä—Ü–∏–π)`
                        : `${servings} –ø–æ—Ä—Ü–∏–π`
                    console.log(`      üçΩÔ∏è  –î–æ–±–∞–≤–ª–µ–Ω —Ä–µ—Ü–µ–ø—Ç: ${recipeData.recipeName} (${portionInfo})`)
                } else {
                    console.warn(`      ‚ö†Ô∏è  –î–ª—è —Ä–µ—Ü–µ–ø—Ç–∞ ${recipeData.recipeName} –Ω–µ —É–∫–∞–∑–∞–Ω—ã –Ω–∏ –ø–æ—Ä—Ü–∏–∏, –Ω–∏ –≥—Ä–∞–º–º—ã`)
                }
            } else {
                console.warn(`      ‚ö†Ô∏è  –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${recipeData.recipeName}`)
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        for (const ingredientData of mealData.ingredients) {
            const ingredient = await prisma.ingredients.findFirst({
                where: { name: ingredientData.ingredientName },
            })

            if (ingredient) {
                await prisma.mealToIngredients.create({
                    data: {
                        mealId: meal.id,
                        ingredientId: ingredient.id,
                        quantity: ingredientData.quantity,
                    },
                })
                console.log(
                    `      ü•ï –î–æ–±–∞–≤–ª–µ–Ω –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: ${ingredientData.ingredientName} (${ingredientData.quantity}–≥)`,
                )
            } else {
                console.warn(`      ‚ö†Ô∏è  –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${ingredientData.ingredientName}`)
            }
        }

        const mealTypeNames: Record<typeof mealData.type, string> = {
            breakfast: '–ó–∞–≤—Ç—Ä–∞–∫',
            lunch: '–û–±–µ–¥',
            dinner: '–£–∂–∏–Ω',
            snack: '–ü–µ—Ä–µ–∫—É—Å',
        }

        console.log(
            `   ‚úÖ ${mealTypeNames[mealData.type]} —Å–æ–∑–¥–∞–Ω (sortOrder: ${sortOrder}, –≤—Ä–µ–º—è: ${mealData.mealTime})`,
        )
    }

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${sortedMeals.length} –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏`)
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–¥–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */
export async function runDaySeed(dayData: SeedDayData, userName?: string) {
    console.log('‚ö° –í—Ö–æ–¥ –≤ runDaySeed')

    try {
        console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...')
        await prisma.$connect()
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ')

        await seedDayTemplate(dayData, userName)
    } catch (e) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∏–¥–∞:', e)
        if (e instanceof Error) {
            console.error('Stack trace:', e.stack)
        }
        process.exit(1)
    } finally {
        console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ë–î...')
        await prisma.$disconnect()
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export type {
    SeedDayData,
    SeedIngredient,
    SeedRecipe,
    SeedMeal,
    SeedDayPlan,
    SeedMealIngredient,
    SeedMealRecipe,
    SeedRecipeIngredient,
} from '../types'
