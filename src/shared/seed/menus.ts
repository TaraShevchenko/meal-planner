import { PrismaClient } from '@prisma/client'

import { INGREDIENT_NAMES } from './data/Ingredients.data'
import { MEAL_TIMES, createMealTime, logProgress } from './utils'

const prisma = new PrismaClient()

type MealPlan = {
    day: string
    date: string
    breakfast: string
    lunch: string
    dinner: string
    fruitSnack: string[]
    sweetSnack: string[]
}

const MEAL_PLANS: MealPlan[] = [
    {
        day: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        date: '2025-06-01',
        breakfast: '–û–º–ª–µ—Ç —ñ–∑ —à–∏–Ω–∫–æ—é —Ç–∞ —Å–∞–ª–∞—Ç–æ–º',
        lunch: '–ë—É–ª–≥—É—Ä –∑ –∫—É—Ä—è—á–∏–º–∏ –∫–æ—Ç–ª–µ—Ç–∞–º–∏',
        dinner: '–ë—É–ª–≥—É—Ä –∑ –±—É—Ä—è–∫–æ–º —Ç–∞ –æ–ª—ñ—î—é',
        fruitSnack: [INGREDIENT_NAMES.APPLE, INGREDIENT_NAMES.WALNUTS],
        sweetSnack: [INGREDIENT_NAMES.DARK_CHOCOLATE],
    },
    {
        day: '–í—Ç–æ—Ä–Ω–∏–∫',
        date: '2025-06-02',
        breakfast: '–°–∏—Ä –∑ –º–µ–¥–æ–º —Ç–∞ —Å–º–µ—Ç–∞–Ω–æ—é',
        lunch: '–¢—É—à–∫–æ–≤–∞–Ω–∞ –∫–∞—Ä—Ç–æ–ø–ª—è –∑ –º º—è—Å–æ–º',
        dinner: '–ö–∞—Ä—Ç–æ–ø–ª—è–Ω–µ –ø—é—Ä–µ –∑ —Å–∞–ª–∞—Ç–æ–º',
        fruitSnack: [INGREDIENT_NAMES.BANANA],
        sweetSnack: [INGREDIENT_NAMES.DRIED_FRUITS],
    },
    {
        day: '–°—Ä–µ–¥–∞',
        date: '2025-06-03',
        breakfast: '–Ø–π—Ü—è –∑ –æ–≤–æ—á–µ–≤–∏–º —Å–∞–ª–∞—Ç–æ–º',
        lunch: '–ú–∞–∫–∞—Ä–æ–Ω–∏ –∑ –∫—É—Ä–∫–æ—é',
        dinner: '–ú–∞–∫–∞—Ä–æ–Ω–∏ –∑ –º–æ—Ä–∫–≤–æ—é –ø–æ-–∫–æ—Ä–µ–π—Å—å–∫–∏',
        fruitSnack: [INGREDIENT_NAMES.MANDARIN],
        sweetSnack: [INGREDIENT_NAMES.COTTAGE_CHEESE, INGREDIENT_NAMES.HONEY],
    },
    {
        day: '–ß–µ—Ç–≤–µ—Ä–≥',
        date: '2025-06-04',
        breakfast: '–Ø—î—á–Ω—è –∑ —Å–∞–ª–∞—Ç–æ–º —Ç–∞ —Ö–ª—ñ–±–æ–º',
        lunch: '–ì—Ä–µ—á–∫–∞ –∑ –∫—É—Ä—è—á–∏–º–∏ –∫—Ä–∏–ª—å—Ü—è–º–∏',
        dinner: '–ì—Ä–µ—á–∫–∞ –∑ –∫–≤–∞—à–µ–Ω–æ—é –∫–∞–ø—É—Å—Ç–æ—é',
        fruitSnack: [INGREDIENT_NAMES.KIWI],
        sweetSnack: [INGREDIENT_NAMES.GRAIN_BAR],
    },
    {
        day: '–ü—è—Ç–Ω–∏—Ü–∞',
        date: '2025-06-05',
        breakfast: '–û–º–ª–µ—Ç —ñ–∑ —Å–æ—Å–∏—Å–∫–∞–º–∏',
        lunch: '–õ–æ–∫—à–∏–Ω–∞ –∑ –∫—É—Ä—è—á–∏–º–∏ –∫–æ—Ç–ª–µ—Ç–∞–º–∏',
        dinner: '–õ–æ–∫—à–∏–Ω–∞ –∑ –º–æ—Ä–∫–≤–æ—é —Ç–∞ —Å–∏—Ä–æ–º',
        fruitSnack: [INGREDIENT_NAMES.APPLE, INGREDIENT_NAMES.WALNUTS],
        sweetSnack: [INGREDIENT_NAMES.DARK_CHOC_WITH_NUTS],
    },
    {
        day: '–°—É–±–±–æ—Ç–∞',
        date: '2025-06-06',
        breakfast: '–°–∏—Ä –∑ –±–∞–Ω–∞–Ω–æ–º',
        lunch: '–†–∏—Å –∑ —Ç–µ—Ñ—Ç–µ–ª—è–º–∏',
        dinner: '–†–∏—Å –∑ –±—É—Ä—è–∫–æ–º —Ç–∞ –∑–µ–ª–µ–Ω–Ω—é',
        fruitSnack: [INGREDIENT_NAMES.GRAPES],
        sweetSnack: [INGREDIENT_NAMES.YOGURT, INGREDIENT_NAMES.HONEY],
    },
    {
        day: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
        date: '2025-06-07',
        breakfast: '–Ø–π—Ü—è –∑ –∑–µ–ª–µ–Ω–Ω—é —Ç–∞ —Ö–ª—ñ–±–æ–º',
        lunch: '–ü—é—Ä–µ –∑ –∫—É—Ä—è—á–∏–º–∏ –∫—Ä–∏–ª—å—Ü—è–º–∏',
        dinner: '–ü—é—Ä–µ –∑ –±—É—Ä—è–∫–æ–º —Ç–∞ —Å–∏—Ä–æ–º',
        fruitSnack: [INGREDIENT_NAMES.PLUMS],
        sweetSnack: [INGREDIENT_NAMES.OATMEAL_COOKIES],
    },
]

async function seedMenus(userId: string = '8fa71687-a622-4e68-bf31-0a42d37df994') {
    console.log(`–ù–∞—á–∞–ª–æ —Å–∏–¥–∏–Ω–≥–∞ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`)

    let currentIndex = 0
    for (const mealPlan of MEAL_PLANS) {
        currentIndex++
        logProgress('–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é', currentIndex, MEAL_PLANS.length)

        // –°–æ–∑–¥–∞—ë–º –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å
        const menu = await prisma.menu.create({
            data: {
                date: new Date(mealPlan.date),
                userId: userId,
            },
        })

        console.log(`üìÖ –°–æ–∑–¥–∞–Ω–æ –º–µ–Ω—é –Ω–∞ ${mealPlan.day} (${mealPlan.date})`)

        // –°–æ–∑–¥–∞—ë–º –∑–∞–≤—Ç—Ä–∞–∫
        const breakfastRecipe = await prisma.recipe.findFirst({
            where: { name: mealPlan.breakfast },
        })

        if (breakfastRecipe) {
            const breakfastMeal = await prisma.meal.create({
                data: {
                    type: 'breakfast',
                    mealTime: createMealTime(mealPlan.date, MEAL_TIMES.breakfast),
                    menuId: menu.id,
                },
            })

            await prisma.mealToRecipe.create({
                data: {
                    mealId: breakfastMeal.id,
                    recipeId: breakfastRecipe.id,
                    servings: 1,
                },
            })
            console.log(`   üåÖ –ó–∞–≤—Ç—Ä–∞–∫: ${mealPlan.breakfast}`)
        } else {
            console.warn(`   ‚ö†Ô∏è  –†–µ—Ü–µ–ø—Ç –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${mealPlan.breakfast}`)
        }

        // –°–æ–∑–¥–∞—ë–º –æ–±–µ–¥
        const lunchRecipe = await prisma.recipe.findFirst({
            where: { name: mealPlan.lunch },
        })

        if (lunchRecipe) {
            const lunchMeal = await prisma.meal.create({
                data: {
                    type: 'lunch',
                    mealTime: createMealTime(mealPlan.date, MEAL_TIMES.lunch),
                    menuId: menu.id,
                },
            })

            await prisma.mealToRecipe.create({
                data: {
                    mealId: lunchMeal.id,
                    recipeId: lunchRecipe.id,
                    servings: 1,
                },
            })

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–¥–∫–∏–π –ø–µ—Ä–µ–∫—É—Å –∫ –æ–±–µ–¥—É
            for (const ingredientName of mealPlan.sweetSnack) {
                const ingredient = await prisma.ingredients.findFirst({
                    where: { name: ingredientName },
                })

                if (ingredient) {
                    await prisma.mealToIngredients.create({
                        data: {
                            mealId: lunchMeal.id,
                            ingredientId: ingredient.id,
                            quantity: getIngredientQuantity(ingredientName),
                        },
                    })
                }
            }
            console.log(`   ‚òÄÔ∏è  –û–±–µ–¥: ${mealPlan.lunch} + —Å–ª–∞–¥–∫–∏–π –ø–µ—Ä–µ–∫—É—Å`)
        } else {
            console.warn(`   ‚ö†Ô∏è  –†–µ—Ü–µ–ø—Ç –¥–ª—è –æ–±–µ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${mealPlan.lunch}`)
        }

        // –°–æ–∑–¥–∞—ë–º —É–∂–∏–Ω
        const dinnerRecipe = await prisma.recipe.findFirst({
            where: { name: mealPlan.dinner },
        })

        if (dinnerRecipe) {
            const dinnerMeal = await prisma.meal.create({
                data: {
                    type: 'dinner',
                    mealTime: createMealTime(mealPlan.date, MEAL_TIMES.dinner),
                    menuId: menu.id,
                },
            })

            await prisma.mealToRecipe.create({
                data: {
                    mealId: dinnerMeal.id,
                    recipeId: dinnerRecipe.id,
                    servings: 1,
                },
            })
            console.log(`   üåô –£–∂–∏–Ω: ${mealPlan.dinner}`)
        } else {
            console.warn(`   ‚ö†Ô∏è  –†–µ—Ü–µ–ø—Ç –¥–ª—è —É–∂–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${mealPlan.dinner}`)
        }

        // –°–æ–∑–¥–∞—ë–º —Ñ—Ä—É–∫—Ç–æ–≤—ã–π –ø–µ—Ä–µ–∫—É—Å
        const snackMeal = await prisma.meal.create({
            data: {
                type: 'snack',
                mealTime: createMealTime(mealPlan.date, MEAL_TIMES.snack),
                menuId: menu.id,
            },
        })

        let snackItems: string[] = []
        for (const ingredientName of mealPlan.fruitSnack) {
            const ingredient = await prisma.ingredients.findFirst({
                where: { name: ingredientName },
            })

            if (ingredient) {
                await prisma.mealToIngredients.create({
                    data: {
                        mealId: snackMeal.id,
                        ingredientId: ingredient.id,
                        quantity: getIngredientQuantity(ingredientName),
                    },
                })
                snackItems.push(ingredientName)
            }
        }
        console.log(`   üçé –ü–µ—Ä–µ–∫—É—Å: ${snackItems.join(', ')}`)
    }

    console.log('\n‚úÖ –°–∏–¥–∏–Ω–≥ –º–µ–Ω—é –∑–∞–≤–µ—Ä—à–µ–Ω!')
}

function getIngredientQuantity(ingredientName: string): number {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫—É—Å–æ–≤
    const quantities: Record<string, number> = {
        [INGREDIENT_NAMES.APPLE]: 150, // 1 —è–±–ª–æ–∫–æ
        [INGREDIENT_NAMES.WALNUTS]: 25, // –≥–æ—Ä—Å—Ç—å –æ—Ä–µ—Ö–æ–≤
        [INGREDIENT_NAMES.DARK_CHOCOLATE]: 20, // 2-3 –¥–æ–ª—å–∫–∏
        [INGREDIENT_NAMES.BANANA]: 120, // 1 –±–∞–Ω–∞–Ω
        [INGREDIENT_NAMES.DRIED_FRUITS]: 30, // 3-4 —à—Ç—É–∫–∏
        [INGREDIENT_NAMES.MANDARIN]: 100, // 1 –º–∞–Ω–¥–∞—Ä–∏–Ω
        [INGREDIENT_NAMES.COTTAGE_CHEESE]: 100, // 100–≥ —Ç–≤–æ—Ä–æ–≥–∞
        [INGREDIENT_NAMES.HONEY]: 5, // 1 —á.–ª. –º—ë–¥–∞
        [INGREDIENT_NAMES.KIWI]: 80, // 1 –∫–∏–≤–∏
        [INGREDIENT_NAMES.PEAR]: 150, // 1 –≥—Ä—É—à–∞
        [INGREDIENT_NAMES.GRAIN_BAR]: 30, // 1 –±–∞—Ç–æ–Ω—á–∏–∫
        [INGREDIENT_NAMES.DARK_CHOC_WITH_NUTS]: 20, // 2 –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∞
        [INGREDIENT_NAMES.GRAPES]: 100, // –≥–æ—Ä—Å—Ç—å –≤–∏–Ω–æ–≥—Ä–∞–¥–∞
        [INGREDIENT_NAMES.YOGURT]: 150, // 150–≥ –π–æ–≥—É—Ä—Ç–∞
        [INGREDIENT_NAMES.PLUMS]: 120, // –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–∏–≤
        [INGREDIENT_NAMES.APRICOTS]: 100, // –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–±—Ä–∏–∫–æ—Å–æ–≤
        [INGREDIENT_NAMES.OATMEAL_COOKIES]: 30, // 1-2 –ø–µ—á–µ–Ω—å—è
    }

    return quantities[ingredientName] || 50 // –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–¥–∞
export async function runMenuSeed(userId: string) {
    try {
        await seedMenus(userId)
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–¥–∏–Ω–≥–µ –º–µ–Ω—é:', e)
        process.exit(1)
    } finally {
        await prisma.$disconnect()
    }
}

runMenuSeed('8fa71687-a622-4e68-bf31-0a42d37df994')
