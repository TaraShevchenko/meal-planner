generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ingredients {
  id       String                @id @default(uuid())
  name     String                @unique
  calories Float
  protein  Float
  carbs    Float
  fat      Float
  meals    MealToIngredients[]
  recipes  RecipeToIngredients[]

  @@map("ingredients")
}

model Recipe {
  id          String                @id @default(uuid())
  name        String
  meals       MealToRecipe[]
  ingredients RecipeToIngredients[]

  @@map("recipes")
}

model Meal {
  id                  String                @id @default(uuid())
  mealTime            DateTime?
  type                MealType
  menuId              String?
  sortOrder           Int                   @default(0)
  ingredients         MealToIngredients[]
  recipes             MealToRecipe[]
  MealToUnplannedMeal MealToUnplannedMeal[]
  menu                Menu?                 @relation(fields: [menuId], references: [id])

  @@map("meals")
}

model Menu {
  id     String   @id @default(uuid())
  date   DateTime
  userId String
  meals  Meal[]
  User   User     @relation(fields: [userId], references: [id])

  @@map("menus")
}

model RecipeToIngredients {
  recipeId     String
  ingredientId String
  quantity     Float
  ingredient   Ingredients @relation(fields: [ingredientId], references: [id])
  recipe       Recipe      @relation(fields: [recipeId], references: [id])

  @@id([recipeId, ingredientId])
  @@map("recipe_ingredients")
}

model MealToRecipe {
  mealId   String
  recipeId String
  servings Float
  meal     Meal   @relation(fields: [mealId], references: [id])
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@id([mealId, recipeId])
  @@map("meal_recipes")
}

model MealToIngredients {
  mealId       String
  ingredientId String
  quantity     Float
  ingredient   Ingredients @relation(fields: [ingredientId], references: [id])
  meal         Meal        @relation(fields: [mealId], references: [id])

  @@id([mealId, ingredientId])
  @@map("meal_ingredients")
}

model UnplannedMeal {
  id       String                @id @default(uuid())
  name     String                @unique
  calories Float
  protein  Float
  carbs    Float
  fat      Float
  meals    MealToUnplannedMeal[]

  @@map("unplanned_meals")
}

model MealToUnplannedMeal {
  mealId          String
  unplannedMealId String
  quantity        Float
  meal            Meal          @relation(fields: [mealId], references: [id])
  unplannedMeal   UnplannedMeal @relation(fields: [unplannedMealId], references: [id])

  @@id([mealId, unplannedMealId])
  @@map("meal_unplanned_meals")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  menus         Menu[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum MealType {
  breakfast
  lunch
  dinner
  snack
}

enum Role {
  USER
  ADMIN
}
