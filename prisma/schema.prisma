generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Ingredients {
    id       String @id @default(uuid())
    name     String @unique
    calories Float
    protein  Float
    carbs    Float
    fat      Float

    recipes RecipeToIngredients[]
    meals   MealToIngredients[]

    @@map("ingredients")
}

model Recipe {
    id   String @id @default(uuid())
    name String

    ingredients RecipeToIngredients[]
    meals       MealToRecipe[]

    @@map("recipes")
}

model Meal {
    id        String    @id @default(uuid())
    mealTime  DateTime?
    type      MealType
    sortOrder Int       @default(0)

    recipes     MealToRecipe[]
    ingredients MealToIngredients[]
    menu        Menu?               @relation(fields: [menuId], references: [id])
    menuId      String?

    @@map("meals")
}

model Menu {
    id   String   @id @default(uuid())
    date DateTime

    meals  Meal[]
    User   User   @relation(fields: [userId], references: [id])
    userId String

    @@map("menus")
}

model RecipeToIngredients {
    recipe       Recipe      @relation(fields: [recipeId], references: [id])
    recipeId     String
    ingredient   Ingredients @relation(fields: [ingredientId], references: [id])
    ingredientId String
    quantity     Float

    @@id([recipeId, ingredientId])
    @@map("recipe_ingredients")
}

model MealToRecipe {
    meal     Meal   @relation(fields: [mealId], references: [id])
    mealId   String
    recipe   Recipe @relation(fields: [recipeId], references: [id])
    recipeId String
    servings Float

    @@id([mealId, recipeId])
    @@map("meal_recipes")
}

model MealToIngredients {
    meal         Meal        @relation(fields: [mealId], references: [id])
    mealId       String
    ingredient   Ingredients @relation(fields: [ingredientId], references: [id])
    ingredientId String
    quantity     Float

    @@id([mealId, ingredientId])
    @@map("meal_ingredients")
}

enum MealType {
    breakfast
    lunch
    dinner
    snack
}

enum Role {
    USER
    ADMIN
}

model User {
    id            String    @id @default(uuid())
    name          String?
    email         String?   @unique
    password      String?
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)
    accounts      Account[]
    sessions      Session[]
    menus         Menu[]
}

model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
