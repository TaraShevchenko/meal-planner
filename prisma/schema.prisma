// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql with Clerk authentication
    // User data is managed by Clerk, we only store additional app-specific data
    url      = env("DATABASE_URL")
}

// === СЕМЕЙНАЯ СИСТЕМА ===
model Family {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    members      FamilyMember[]
    mealPlans    MealPlan[]
    recipes      Recipe[]
    groceryLists GroceryList[]

    @@index([name])
}

model FamilyMember {
    id            String     @id @default(cuid())
    familyId      String
    userId        String
    role          FamilyRole @default(MEMBER)
    dailyCalories Int?
    dailyProteins Float?
    dailyFats     Float?
    dailyCarbs    Float?
    createdAt     DateTime   @default(now())

    family      Family      @relation(fields: [familyId], references: [id], onDelete: Cascade)
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    mealEntries MealEntry[]

    @@unique([familyId, userId])
    @@index([familyId])
    @@index([userId])
}

enum FamilyRole {
    ADMIN
    MEMBER
}

// === ИНГРЕДИЕНТЫ И ПРОДУКТЫ ===
model Ingredient {
    id              String   @id @default(cuid())
    name            String
    category        String?
    defaultUnit     String   @default("г")
    caloriesPer100g Float
    proteinsPer100g Float
    fatsPer100g     Float
    carbsPer100g    Float
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    recipeIngredients RecipeIngredient[]
    mealIngredients   MealIngredient[]
    groceryItems      GroceryItem[]

    @@index([name])
    @@index([category])
}

// === РЕЦЕПТЫ ===
model Recipe {
    id           String   @id @default(cuid())
    familyId     String
    name         String
    description  String?
    servings     Int      @default(1)
    cookingTime  Int? // в минутах
    instructions String?
    isQuickMeal  Boolean  @default(false)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    family      Family             @relation(fields: [familyId], references: [id], onDelete: Cascade)
    ingredients RecipeIngredient[]
    mealEntries MealEntry[]

    @@index([familyId])
    @@index([name])
    @@index([isQuickMeal])
}

model RecipeIngredient {
    id           String @id @default(cuid())
    recipeId     String
    ingredientId String
    amount       Float
    unit         String @default("г")

    recipe     Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

    @@unique([recipeId, ingredientId])
    @@index([recipeId])
}

// === ПЛАНИРОВАНИЕ ПИТАНИЯ ===
model MealPlan {
    id        String   @id @default(cuid())
    familyId  String
    date      DateTime @db.Date
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
    meals  Meal[]

    @@unique([familyId, date])
    @@index([familyId, date])
}

model Meal {
    id         String   @id @default(cuid())
    mealPlanId String
    type       MealType
    name       String?
    createdAt  DateTime @default(now())

    mealPlan MealPlan    @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
    entries  MealEntry[]

    @@index([mealPlanId])
    @@index([type])
}

enum MealType {
    BREAKFAST
    LUNCH
    DINNER
    SNACK
}

model MealEntry {
    id             String    @id @default(cuid())
    mealId         String
    familyMemberId String?
    recipeId       String?
    servings       Float     @default(1)
    isConsumed     Boolean   @default(false)
    consumedAt     DateTime?
    createdAt      DateTime  @default(now())

    meal         Meal             @relation(fields: [mealId], references: [id], onDelete: Cascade)
    familyMember FamilyMember?    @relation(fields: [familyMemberId], references: [id], onDelete: SetNull)
    recipe       Recipe?          @relation(fields: [recipeId], references: [id], onDelete: SetNull)
    ingredients  MealIngredient[]

    @@index([mealId])
    @@index([familyMemberId])
    @@index([isConsumed])
}

model MealIngredient {
    id           String @id @default(cuid())
    mealEntryId  String
    ingredientId String
    amount       Float
    unit         String @default("г")

    mealEntry  MealEntry  @relation(fields: [mealEntryId], references: [id], onDelete: Cascade)
    ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

    @@unique([mealEntryId, ingredientId])
    @@index([mealEntryId])
}

// === СИСТЕМА ПОКУПОК ===
model GroceryList {
    id          String   @id @default(cuid())
    familyId    String
    name        String
    startDate   DateTime @db.Date
    endDate     DateTime @db.Date
    isCompleted Boolean  @default(false)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    family Family        @relation(fields: [familyId], references: [id], onDelete: Cascade)
    items  GroceryItem[]

    @@index([familyId])
    @@index([startDate, endDate])
}

model GroceryItem {
    id             String          @id @default(cuid())
    groceryListId  String
    ingredientId   String
    requiredAmount Float
    unit           String          @default("г")
    packageSize    Float?
    packageUnit    String?
    estimatedPrice Float?
    category       GroceryCategory @default(BUY)
    isPurchased    Boolean         @default(false)
    purchasedAt    DateTime?

    groceryList GroceryList @relation(fields: [groceryListId], references: [id], onDelete: Cascade)
    ingredient  Ingredient  @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

    @@unique([groceryListId, ingredientId])
    @@index([groceryListId])
    @@index([category])
}

enum GroceryCategory {
    BUY
    CHECK_AVAILABILITY
}

model User {
    id        String   @id // Clerk user ID
    email     String   @unique
    name      String?
    imageUrl  String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    familyMembers FamilyMember[]

    @@index([email])
}
